#include<stdio.h>

int N;
int len = 0;
int A[100];
//maximum number of elements is currently 100.

void push(int x);
void pop();
int top();
bool empty();
int size();
void heapify(int idx);
void printPQ();

int main(){
    scanf("%d",&N);
    for(int i=0;i<N;i++){
        int x;
        scanf("%d",&x);
        push(x);
        //printPQ();
    }
    //for(int i=0;i<15;i++){
    //    printf("---------\n");
    //    printf("%d\n",top());
    //    pop();
    //    printPQ();
    //}
    
    printPQ();
    printf("%d\n",top());
    return 0;
}

void printPQ(){
    for(int i=1;i<=len;i++){
        printf("%d ",A[i]);
    }
    printf("\n");
}

void swap(int a,int b){
    int tmp = A[a];
    A[a] = A[b];
    A[b] = tmp;
}

void push(int x){
    //printf("%d\n",x);
    A[++len] = x;
    int n = len;
    while(n>1){
        if(x <= A[n/2]) break;
        swap(n,n/2);
        n/=2;
    }
}

void pop(){
    if(empty()){
        printf("The queue is empty!\n");
        return;
    }
    A[1] = A[len--];
    heapify(1);
}

int top(){
    if(empty()){
        printf("error. no element exist\n");
        return -31101;
    }
    return A[1];
}

void heapify(int idx){
    if(idx*2>len) return;
    int x = idx*2;
    if(A[idx*2+1] > A[x] && (idx*2+1)<=len) x = idx*2+1;
    
    if(A[x]>A[idx]){
        swap(idx,x);
        heapify(x);
    }
}

bool empty(){
    return size()==0?true:false;
}

int size(){
    return len;
}
