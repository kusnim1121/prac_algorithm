//https://www.acmicpc.net/problem/21317

//Top-down solution
#include<stdio.h>

const int INF = 1e9;
int N;
int A[25][2];
int dp[25][2];
int k;
int min(int a,int b){return a<b?a:b;}
int solve(int cur,bool bSuperJump){
    if(cur<1) return INF;
    
    int &mem = dp[cur][bSuperJump];
    if(mem>0) return mem;
    mem = INF;
    if(cur==1){
        return mem = 0;
    }
    if(bSuperJump){
        mem = min(mem,solve(cur-1,true)+ A[cur-1][0]);
        mem = min(mem,solve(cur-2,true)+ A[cur-2][1]);
        mem = min(mem,solve(cur-3,false) + k);
    }else{
        mem = min(mem,solve(cur-1,false) + A[cur-1][0]);
        mem = min(mem,solve(cur-2,false) + A[cur-2][1]);
    }
    return mem;
}
int main(){
    scanf("%d",&N);
    for(int i=1;i<=N-1;i++){
        scanf("%d%d",&A[i][0],&A[i][1]);
    }
    scanf("%d",&k);
    int ans = solve(N,0);
    ans = min(ans,solve(N,1));
    printf("%d",ans);
    return 0;
}


// DFS solution
/*
#include<stdio.h>

int N;
int A[25][2];
int dp[25][2];
int k;
int ans = 1e9;
void solve(int cur,int usedEnergy,int steps, bool bSuperJump){
    if(cur<1) return;
    if(steps == 1) usedEnergy += A[cur][0];
    else if(steps == 2) usedEnergy += A[cur][1];
    else if(steps == 3) usedEnergy += k;
    
    int &mem = dp[cur][bSuperJump];
    
    
    if(cur==1){
        ans = ans<usedEnergy?ans:usedEnergy;
    }
    if(bSuperJump){
        solve(cur-1,usedEnergy,1,true);
        solve(cur-2,usedEnergy,2,true);
        solve(cur-3,usedEnergy,3,false);
    }else{
        solve(cur-1,usedEnergy,1,false);
        solve(cur-2,usedEnergy,2,false);
    }
}
int main(){
    scanf("%d",&N);
    for(int i=1;i<=N-1;i++){
        scanf("%d%d",&A[i][0],&A[i][1]);
    }
    scanf("%d",&k);
    solve(N,0,0,0);
    solve(N,0,0,1);
    printf("%d",ans);
    return 0;
}
*/

//bottom-up solution 1
/*
#include<stdio.h>
#include<utility>
#include<vector>
using namespace std;

typedef pair<int,int> pii;
const int INF = 1e9;
int N;
int k;
vector<pii> VP;
int dp[21][2];
int min(int a,int b){return a<b?a:b;}
int main(){
    scanf("%d",&N);
    for(int i=0;i<N-1;i++){
        int a,b;
        scanf("%d%d",&a,&b);
        VP.push_back({a,b});
    }
    scanf("%d",&k);
    
    for(int i=0;i<=N;i++){
        dp[i][0] = dp[i][1] = INF;
    }
    dp[1][0] = 0;
    if(N>1) dp[2][0] = VP[0].first;
    if(N>2) dp[3][0] = min(VP[0].second,dp[2][0] + VP[1].first);

    for(int i=4;i<=N;i++){
        dp[i][1] = dp[i-3][0] + k;
        for(int j=0;j<2;j++){
            dp[i][j] = min(dp[i][j], dp[i-1][j] + VP[i-1-1].first);
            dp[i][j] = min(dp[i][j],dp[i-2][j] + VP[i-2-1].second);
        }
        //printf("dp[%d][0]: %d\n",i,dp[i][0]);
        //printf("dp[%d][1]: %d\n",i,dp[i][1]);
    }
    printf("%d",min(dp[N][0],dp[N][1]));
    return 0;
}
*/

//bottom-up solution 2
/*
#include<stdio.h>

const int INF = 1e9;
int N;
int k;
int A[25][2];
int dp[25][2];
int min(int a,int b){return a<b?a:b;}
int main(){
    scanf("%d",&N);
    for(int i=1;i<=N-1;i++){
        scanf("%d%d",&A[i][0],&A[i][1]);
    }
    scanf("%d",&k);
    for(int i=1;i<=N-1;i++){
        dp[i+1][0] = min(dp[i+1][0]==0?INF:dp[i+1][0],dp[i][0] + A[i][0]);
        dp[i+2][0] = min(dp[i+2][0]==0?INF:dp[i+2][0],dp[i][0] + A[i][1]);
        if(dp[i][1] != 0){
            dp[i+1][1] = min(dp[i+1][1],dp[i][1] + A[i][0]);
            dp[i+2][1] = min(dp[i+2][1],dp[i][1] + A[i][1]);
        }
        dp[i+3][1] = dp[i][0] + k;
    }
    
    printf("%d",min(dp[N][0],dp[N][1]==0?INF:dp[N][1]));
    return 0;
}
*/
