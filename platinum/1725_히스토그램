//https://www.acmicpc.net/problem/1725

//Can also be solved using SegmentTree or Divide&Conquer method
#include<stdio.h>
#include<stack>
#include<utility>
using namespace std;
typedef pair<int,int> pii;

int N;
stack<int> S;
int A[100010];
int max(int a,int b){return a>b?a:b;}
int main(){
    scanf("%d",&N);
    for(int i=1;i<=N;i++){
        scanf("%d",&A[i]);
    }
    //push 0 initially in order for the calculation of first element to work
    //also needed to calculate the width of last element in stack.
    S.push(0);
    int ans = 0;
    //loop N+1 times. +1 in order to check last element.
    for(int i=1;i<=N+1;i++){
        //the stack is in increasing order of height
        while(!S.empty() && A[S.top()]>A[i]){
            int top = S.top();
            S.pop();
            //calculate the width of rectangle using the previous element.
            ans = max(ans,(i-S.top()-1)*A[top]);
            //printf("i:%d, S.top():%d, height:%d, ans:%d\n",i,S.top(),A[top],ans);
        }
        S.push(i);
    }
    printf("%d",ans);
    return 0;
}
